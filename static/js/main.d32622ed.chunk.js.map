{"version":3,"sources":["components/Loader.js","components/Showproblems.js","components/Error.js","Loadproblems.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","props","id","Showusers","useState","search","setSearch","page","setPage","diffIncreaing","setDiff","solvecntIncreaing","setSolvedcnt","selectedTags","setSelectedtags","filterTags","setFiltertags","status","setStatus","showData","setData","useEffect","temp","problems","filter","problem","flag","i","length","tags","indexOf","problemStatus","name","toLowerCase","trim","sort","a","b","rating","serialNumber","prev","className","type","placeholder","onChange","e","target","value","ele","map","index","onClick","innerText","splice","currentTarget","parentElement","removeTag","solvedCount","slice","href","contestId","push","Math","floor","showpageNums","Error","error","Loadproblems","loadingState","errorState","errorMsg","loading","setLoading","setproblems","Tags","setTags","fetch","then","Response","json","data","mp","Map","result","forEach","set","problemStatistics","tag","has","User","verdict","get","arr","val","tempTags","key","catch","Showproblems","App","user","setuser","onSubmit","preventDefault","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d32622ed.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./loader.css\";\nfunction Loader(props) {\n  return (\n    <div id=\"loader\">\n      <div id=\"box\">\n        <div id=\"l\">\n          <p>L</p>\n          <div></div>\n        </div>\n        <div id=\"o\">\n          <p>O</p>\n          <div></div>\n        </div>\n        <div id=\"a\">\n          <p>A</p>\n          <div></div>\n        </div>\n        <div id=\"d\">\n          <p>D</p>\n          <div></div>\n        </div>\n        <div id=\"i\">\n          <p>I</p>\n          <div></div>\n        </div>\n        <div id=\"n\">\n          <p>N</p>\n          <div></div>\n        </div>\n        <div id=\"g\">\n          <p>G</p>\n          <div></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import React, { useState, useEffect } from \"react\";\nimport { MdClear } from \"react-icons/md\";\nfunction Showusers(props) {\n  const [search, setSearch] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [diffIncreaing, setDiff] = useState(true);\n  const [solvecntIncreaing, setSolvedcnt] = useState(true);\n  const [selectedTags, setSelectedtags] = useState([]);\n  const [filterTags, setFiltertags] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [showData, setData] = useState([]);\n  useEffect(() => {\n    //------------------filtedred questions on the basis of tags------------------\n    let temp = props.problems;\n\n    temp = temp.filter((problem) => {\n      let flag = true;\n      for (let i = 0; i < selectedTags.length; i++) {\n        if (problem.tags.indexOf(selectedTags[i]) === -1) {\n          flag = flag && false;\n        } else {\n          flag = flag && true;\n        }\n        if (flag === false) return false;\n      }\n      return flag;\n    });\n\n    //------------------filtedred questions on the basis of status------------------\n    if (status !== \"\") {\n      temp = temp.filter((problem) => {\n        return problem.problemStatus === status;\n      });\n    }\n    temp = temp.filter(\n      (problem) => problem.name.toLowerCase().indexOf(search.toLowerCase().trim()) !== -1\n    );\n    temp.sort((a, b) => {\n      if (a.rating !== b.rating) return a.rating - b.rating;\n      else return a.serialNumber - b.serialNumber;\n    });\n    setPage(1);\n    setData((prev) => [...temp]);\n  }, [selectedTags, status, search]);\n  function removeTag(e) {\n    let temp = [...selectedTags];\n    temp.splice(\n      selectedTags.indexOf(\n        e.currentTarget.parentElement.innerText.trim().toLowerCase()\n      ),\n      1\n    );\n    setSelectedtags((prev) => temp);\n  }\n  function changeOrderByRating() {\n    setDiff((prev) => !prev);\n    if (diffIncreaing) {\n      let temp = [...showData];\n      temp.sort((a, b) => {\n        if (a.rating !== b.rating) return b.rating - a.rating;\n        else return a.serialNumber - b.serialNumber;\n      });\n      setData((prev) => [...temp]);\n    } else {\n      let temp = [...showData];\n      temp.sort((a, b) => {\n        if (a.rating !== b.rating) return a.rating - b.rating;\n        else return a.serialNumber - b.serialNumber;\n      });\n\n      setData((prev) => [...temp]);\n    }\n  }\n  function changeOrderBySolvedcnt() {\n    setSolvedcnt((prev) => !prev);\n    if (solvecntIncreaing) {\n      let temp = [...showData];\n      temp.sort((a, b) => {\n        if (a.solvedCount !== b.solvedCount)\n          return a.solvedCount - b.solvedCount;\n        else return a.serialNumber - b.serialNumber;\n      });\n      setData((prev) => [...temp]);\n    } else {\n      let temp = [...showData];\n      temp.sort((a, b) => {\n        if (a.solvedCount !== b.solvedCount)\n          return b.solvedCount - a.solvedCount;\n        else return a.serialNumber - b.serialNumber;\n      });\n      setData((prev) => [...temp]);\n    }\n  }\n  function showpageNums() {\n    let temp = [];\n    if (page > 1) {\n      temp.push(\n        <span id=\"diffrent\" onClick={() => setPage((prev) => prev - 1)}>\n          Prev.\n        </span>\n      );\n    }\n    if (Math.floor(showData.length / 100) > 1)\n      for (\n        let i = page;\n        i < page + 5 && i <= Math.floor(showData.length / 100) + 1;\n        i++\n      ) {\n        if (i === page)\n          temp.push(\n            <p id=\"highlight\" onClick={() => setPage(i)}>\n              {i}\n            </p>\n          );\n        else\n          temp.push(\n            <p id=\"normal\" onClick={() => setPage(i)}>\n              {i}\n            </p>\n          );\n      }\n    if (page < Math.floor(showData.length / 100) + 1)\n      temp.push(\n        <span id=\"diffrent\" onClick={() => setPage((prev) => prev + 1)}>\n          Next\n        </span>\n      );\n    return temp;\n  }\n  return (\n    <div id=\"container\">\n      <h1>Codeforces Problems</h1>\n      <ul className=\"dropdown\">\n        <li className=\"searchProblem\">\n          <input\n            type=\"text\"\n            id=\"searchProblem\"\n            placeholder=\"Find problem\"\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </li>\n\n        <li className=\"status\">\n          <select onChange={(e) => setStatus((prev) => e.target.value)}>\n            <option value=\"\">All</option>\n            <option value=\"Todo\">Todo</option>\n            <option value=\"Tried\">Tried</option>\n            <option value=\"Solved\">Solved</option>\n          </select>\n        </li>\n        <li className=\"tags\">\n          Tags\n          <ul id=\"dropbox\" className=\"filterTags\">\n            <li>\n              <input\n                type=\"text\"\n                id=\"filterTags\"\n                onChange={(e) => {\n                  return setFiltertags(e.target.value);\n                }}\n              />\n            </li>\n            {props.tags\n              .filter((ele) => {\n                return ele.indexOf(filterTags) !== -1;\n              })\n              .map((ele, index) => {\n                return (\n                  <li\n                    key={index}\n                    onClick={(e) => {\n                      setSelectedtags((prev) => {\n                        if (\n                          prev.indexOf(\n                            e.target.innerText.trim().toLowerCase()\n                          ) === -1\n                        ) {\n                          return [\n                            ...prev,\n                            e.target.innerText.trim().toLowerCase(),\n                          ];\n                        } else return prev;\n                      });\n                    }}\n                  >\n                    {ele}\n                  </li>\n                );\n              })}\n          </ul>\n        </li>\n      </ul>\n\n      <div className=\"Showtags\">\n        {\" \"}\n        {selectedTags.map((ele, index) => {\n          return (\n            <p id=\"tags\" key={index}>\n              {ele}\n              <MdClear className=\"icon\" onClick={(e) => removeTag(e)} />{\" \"}\n            </p>\n          );\n        })}{\" \"}\n      </div>\n      <p id=\"results\">{showData.length} results</p>\n      <div className=\"table-container\">\n        <table>\n          <thead>\n            <tr>\n              <th className=\"Serial\">#</th>\n              <th className=\"Problem\">Problem</th>\n              <th className=\"Status\">Status</th>\n              <th className=\"Rating\" onClick={changeOrderByRating}>\n                Rating\n              </th>\n              <th className=\"Solvedcnt\" onClick={changeOrderBySolvedcnt}>\n                Solved Count\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {showData\n              .slice((page - 1) * 100, page * 100)\n              .map((problem, index) => {\n                return (\n                  <tr key={index}>\n                    <td id=\"number\">{problem.serialNumber}</td>\n                    <td>\n                      <a\n                        target=\"_blank\"\n                        href={`https://codeforces.com/problemset/problem/${problem.contestId}/${problem.index}`}\n                      >\n                        {problem.name}\n                      </a>\n                    </td>\n                    <td id=\"status\">{problem.problemStatus}</td>\n                    <td id=\"rating\">{problem.rating}</td>\n                    <td id=\"count\">{problem.solvedCount}</td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n        {showData.length === 0 ? <p id=\"notFound\">No matching problem</p> : \"\"}\n      </div>\n      <div id=\"pages\">{showpageNums()}</div>\n    </div>\n  );\n}\n\nexport default Showusers;\n","import React from \"react\";\n\nfunction Error(props) {\n  return (\n    <div>\n      <h1>{props.error}</h1>\n    </div>\n  );\n}\n\nexport default Error;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"./components/Loader\";\nimport Showproblems from \"./components/Showproblems\";\nimport Error from \"./components/Error\";\nimport \"./App.css\";\n\nfunction Loadproblems(props) {\n  //----------state for loading and error-------------------------------\n  const [loading, setLoading] = useState({\n    loadingState: true,\n    errorState: false,\n    errorMsg: null,\n  });\n  //------------------------state for problems--------------------\n  const [problems, setproblems] = useState([]);\n  const [Tags, setTags] = useState([]);\n\n  useEffect(() => {\n    //---------------------fetching the problems -----------------------\n    fetch(\"https://codeforces.com/api/problemset.problems\")\n      .then((Response) => {\n        return Response.json();\n      })\n      .then((data) => {\n        //---------------------if Codeforces API return status=\"OK\" then proceed -----------------------\n        if (data.status === \"OK\") {\n          //---------------------creating a map to map every problem to its data -----------------------\n          let mp = new Map();\n          let tags = new Map();\n          data.result.problems.forEach((ele, index) => {\n            //---------------------mapping every problem with key as=\"contestId,index of problem\" -----------------------\n            mp.set(`${ele.contestId}${ele.index}`, {\n              ...ele,\n              ...data.result.problemStatistics[index],\n              problemStatus: \"Todo\", // adding problemStatus to see that this person had soled this problem or not\n            });\n            ele.tags.forEach((tag) => {\n              if (!tags.has(tag)) {\n                tags.set(tag, 1);\n              }\n            });\n          });\n\n          //---------------------fetching the submissions of loged in user -----------------------\n          fetch(`https://codeforces.com/api/user.status?handle=${props.User}`)\n            .then((Response) => {\n              return Response.json();\n            })\n            .then((data) => {\n              //---------------------if Codeforces API return status=\"OK\" then proceed -----------------------\n              if (data.status === \"OK\") {\n                //---------------------looking into every submission-----------------------\n                data.result.forEach((ele) => {\n                  if (mp.has(`${ele.problem.contestId}${ele.problem.index}`)) {\n                    if (typeof ele.verdict !== \"undefined\") {\n                      //---------------------if user had Successfully submitted code for this problem  -----------------------\n                      if (ele.verdict === \"OK\") {\n                        let temp = mp.get(\n                          `${ele.problem.contestId}${ele.problem.index}`\n                        );\n                        //---------------------marking problem status \"OK\" -----------------------\n                        temp.problemStatus = \"Solved\";\n                        mp.set(\n                          `${ele.problem.contestId}${ele.problem.index}`,\n                          temp\n                        );\n                      }\n                    } else {\n                      let temp = mp.get(\n                        `${ele.problem.contestId}${data.problem.index}`\n                      );\n                      //---------------------if problemStatus is not OK but user had Tried the problem -----------------------\n                      if (temp.problemStatus !== \"Solved\")\n                        temp.problemStatus = \"Tried\";\n                      mp.set(\n                        `${ele.problem.contestId}${ele.problem.index}`,\n                        temp\n                      );\n                    }\n                  }\n                });\n                //--------------------extracting problems from map to array\n                let arr = [];\n                for (let [key, val] of mp) {\n                  arr.push(val);\n                }\n                for (let i = 1; i <= arr.length; i++) {\n                  if (typeof arr[i - 1].rating === \"undefined\")\n                    arr[i - 1].rating = 10000;\n                }\n                arr.sort((a, b) => a.rating - b.rating);\n                for (let i = 1; i <= arr.length; i++) {\n                  arr[i - 1].serialNumber = i;\n                }\n\n                let tempTags = [];\n                for (let [key, val] of tags) {\n                  tempTags.push(key);\n                }\n\n                setproblems((prev) => {\n                  return [...prev, ...arr];\n                });\n                setTags((prev) => {\n                  return [...prev, ...tempTags];\n                });\n                setLoading((prev) => {\n                  return {\n                    ...prev,\n                    loadingState: false,\n                    errorState: false,\n                    errorMsg: null,\n                  };\n                });\n              } else {\n                setLoading((prev) => {\n                  return {\n                    ...prev,\n                    loadingState: false,\n                    errorState: true,\n                    errorMsg: \"User Not found\",\n                  };\n                });\n              }\n            })\n            .catch((error) => {\n              setLoading((prev) => {\n                return {\n                  ...prev,\n                  loadingState: false,\n                  errorState: true,\n                  errorMsg: \"Something went wrong\",\n                };\n              });\n            });\n        } else {\n          setLoading((prev) => {\n            return {\n              ...prev,\n              loadingState: false,\n              errorState: true,\n              errorMsg: \"Something went wrong\",\n            };\n          });\n        }\n      })\n      .catch((error) => {\n        setLoading((prev) => {\n          return {\n            ...prev,\n            loadingState: false,\n            errorState: true,\n            errorMsg: \"Something went wrong\",\n          };\n        });\n      });\n  }, [props.User]);\n\n  return (\n    <div>\n      {loading.loadingState ? (\n        <Loader />\n      ) : loading.errorState ? (\n        <Error error={loading.errorMsg} />\n      ) : (\n        <Showproblems problems={problems} tags={Tags} />\n      )}\n      {loading.loadingState ? (\n        \"\"\n      ) : loading.errorState ? (\n        \"\"\n      ) : (\n        <p id=\"end\">Built & designed with ❤️</p>\n      )}\n    </div>\n  );\n}\n\nexport default Loadproblems;\n","import React, { useState } from \"react\";\nimport Loadproblems from \"./Loadproblems\";\nimport \"./App.css\";\n\nfunction App() {\n  const [user, setuser] = useState(null);\n  return (\n    <div>\n      {user === null ? (\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n\n            setuser(e.target.user.value);\n          }}\n        >\n          <p>Enter Codeforces handle</p>\n          <input id=\"user\" placeholder=\"Enter Codeforces handle\" />\n        </form>\n      ) : (\n        <Loadproblems User={user} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}